<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ToyRobot</name>
    </assembly>
    <members>
        <member name="T:ToyRobotConsole.Cell">
            <summary>A Cell is a single location containing an x and y coordinate.</summary>
        </member>
        <member name="P:ToyRobotConsole.Cell.X">
            <summary>Read-only property for x coordinate.</summary>
            <value>Gets the value of x coordinate</value>
        </member>
        <member name="P:ToyRobotConsole.Cell.Y">
            <summary>Read-only property for y coordinate.</summary>
            <value>Gets the value of y coordinate</value>
        </member>
        <member name="M:ToyRobotConsole.Cell.#ctor(System.Int32,System.Int32)">
            <summary>Cell constructor</summary>
            <param name="x">An int parameter for the Cell's x coordinate</param>
            <param name="y">An int parameter for the Cell's y coordinate</param>
        </member>
        <member name="T:ToyRobotConsole.CommandProcessor">
            <summary>
            The CommandProcessor class takes a command string, validates that it contains known commands
            and manages propagation of commands to the correct game elements.
            </summary>
        </member>
        <member name="F:ToyRobotConsole.CommandProcessor._game">
            <summary>Private field for game.</summary>
        </member>
        <member name="M:ToyRobotConsole.CommandProcessor.#ctor(ToyRobotConsole.Game)">
            <summary>Command Processor constructor</summary>
            <param name="game">A game parameter to manage command propagation</param>
        </member>
        <member name="M:ToyRobotConsole.CommandProcessor.Help">
            <summary>Provides a list of suggestions for known commands</summary>
            <returns>A string representation of a list of known commands</returns>
        </member>
        <member name="M:ToyRobotConsole.CommandProcessor.Place(System.String)">
            <summary>Validates the remaining command string and propagates to robot</summary>
            <param name="command">A string containing the parameters of the place command</param>
        </member>
        <member name="M:ToyRobotConsole.CommandProcessor.Execute(System.String)">
            <summary>Validates the command string and propagates to appropriate game object</summary>
            <param name="command">A string containing the command</param>
        </member>
        <member name="T:ToyRobotConsole.Game">
            <summary>The Game class manages the game world.</summary>
        </member>
        <member name="P:ToyRobotConsole.Game.Map">
            <summary>Public read-only property to expose the game's map.</summary>
            <value>Gets the value of the game's map</value>
        </member>
        <member name="P:ToyRobotConsole.Game.Robot">
            <summary>Public read-only property to expose the robot.</summary>
            <value>Gets the value of the game's robot</value>
        </member>
        <member name="F:ToyRobotConsole.Game._playing">
            <summary>Private field for the game's playing state.</summary>
        </member>
        <member name="F:ToyRobotConsole.Game._gui">
            <summary>Private field for the game's GUI state.</summary>
        </member>
        <member name="F:ToyRobotConsole.Game._commandProcessor">
            <summary>Private field for the game's command processor.</summary>
        </member>
        <member name="P:ToyRobotConsole.Game.UI">
            <summary>Public read-only property to expose the user interface.</summary>
            <value>Gets the value of the game's user interface</value>
        </member>
        <member name="M:ToyRobotConsole.Game.#ctor(System.Int32,System.Int32)">
            <summary>Game constructor</summary>
            <param name="dim_x">An int parameter for the width of the map</param>
            <param name="dim_y">An int parameter for the height of the map</param>
        </member>
        <member name="M:ToyRobotConsole.Game.#ctor">
            <summary>
            Game default constructor
            Calls overloaded constructor and passes in default dimensions (5x5)
            </summary>
        </member>
        <member name="M:ToyRobotConsole.Game.Start">
            <summary>Begins the game and manages the game loop</summary>
        </member>
        <member name="M:ToyRobotConsole.Game.Stop">
            <summary>Ends the game</summary>
        </member>
        <member name="T:ToyRobotConsole.Direction">
            <summary>The Direction enum contains a list of valid robot directions.</summary>
        </member>
        <member name="F:ToyRobotConsole.Direction.NORTH">
            <summary>Facing north direction.</summary>
        </member>
        <member name="F:ToyRobotConsole.Direction.EAST">
            <summary>Facing east direction.</summary>
        </member>
        <member name="F:ToyRobotConsole.Direction.SOUTH">
            <summary>Facing south direction.</summary>
        </member>
        <member name="F:ToyRobotConsole.Direction.WEST">
            <summary>Facing west direction.</summary>
        </member>
        <member name="T:ToyRobotConsole.Rotation">
            <summary>The Rotation enum contains a list of valid robot rotations.</summary>
        </member>
        <member name="F:ToyRobotConsole.Rotation.LEFT">
            <summary>Rotate robot left.</summary>
        </member>
        <member name="F:ToyRobotConsole.Rotation.RIGHT">
            <summary>Rotate robot right.</summary>
        </member>
        <member name="T:ToyRobotConsole.Robot">
            <summary>The Robot class contains the functionality for the game's robot.</summary>
        </member>
        <member name="T:ToyRobotConsole.Robot.Warning">
            <summary>The Warning enum contains a list of known warning messages.</summary>
        </member>
        <member name="F:ToyRobotConsole.Robot.Warning.INACTIVE">
            <summary>The robot is inactive.</summary>
        </member>
        <member name="F:ToyRobotConsole.Robot.Warning.BOUNDARY">
            <summary>The requested location is outside the boundary.</summary>
        </member>
        <member name="F:ToyRobotConsole.Robot.Warning.PLACE">
            <summary>The requested location or direction does not exist.</summary>
        </member>
        <member name="F:ToyRobotConsole.Robot._game">
            <summary>Private field for game reference.</summary>
        </member>
        <member name="P:ToyRobotConsole.Robot.Location">
            <summary>Public read-only property to expose the robot's location.</summary>
            <value>Gets the value of the robot's location</value>
        </member>
        <member name="P:ToyRobotConsole.Robot.Direction">
            <summary>Public read-only property to expose the robot's direction.</summary>
            <value>Gets the value of the robot's direction</value>
        </member>
        <member name="P:ToyRobotConsole.Robot.Active">
            <summary>Public read-only property to expose the robot's active status.</summary>
            <value>Gets the value of the robot's active status</value>
        </member>
        <member name="M:ToyRobotConsole.Robot.#ctor(ToyRobotConsole.Game)">
            <summary>Robot constructor.</summary>
            <param name="game">A Game parameter to access game map and ui</param>
        </member>
        <member name="M:ToyRobotConsole.Robot.Place(System.Int32,System.Int32,ToyRobotConsole.Direction)">
            <summary>Places the robot in a location on the map and sets the direction.</summary>
            <param name="x">An int parameter that represents an x coordinate</param>
            <param name="y">An int parameter that represents a y coordinate</param>
            <param name="direction">A Direction parameter to represent robot's direction</param>
        </member>
        <member name="M:ToyRobotConsole.Robot.Report">
            <summary>Prints out the robot's current location and direction.</summary>
        </member>
        <member name="M:ToyRobotConsole.Robot.Move(ToyRobotConsole.Cell)">
            <summary>Moves the robot's location.</summary>
        </member>
        <member name="M:ToyRobotConsole.Robot.Move">
            <summary>Calculates which way the robot needs to move.</summary>
        </member>
        <member name="M:ToyRobotConsole.Robot.Rotate(ToyRobotConsole.Rotation)">
            <summary>Rotates the robot to the right</summary>
        </member>
        <member name="M:ToyRobotConsole.Robot.IsLocated(ToyRobotConsole.Cell)">
            <summary>Checks if the robot is located at a specific cell</summary>
            <param name="location">A Location parameter that represents coordinates</param>
            <returns>A boolean value representing whether the robot is located at cell</returns>
        </member>
        <member name="M:ToyRobotConsole.Robot.PrintWarning(ToyRobotConsole.Robot.Warning)">
            <summary>Prints a known warning to the console</summary>
            <param name="warning">
            A Warning parameter for the type of warning to be displayed
            </param>
        </member>
        <member name="T:ToyRobotConsole.UserInterface">
            <summary>The User Interface is responsible for all interactions with the user.</summary>
        </member>
        <member name="F:ToyRobotConsole.UserInterface._game">
            <summary>Private field for game.</summary>
        </member>
        <member name="M:ToyRobotConsole.UserInterface.#ctor(ToyRobotConsole.Game)">
            <summary>User Interface constructor</summary>
            <param name="game">A game parameter to access game elements</param>
        </member>
        <member name="M:ToyRobotConsole.UserInterface.CellSymbol(ToyRobotConsole.Cell)">
            <summary>Determines which character should be rendered from cell</summary>
            <param name="cell">A cell parameter to determine which symbol is required</param>
            <returns>A string value containing the cell's symbol</returns>
        </member>
        <member name="M:ToyRobotConsole.UserInterface.GridBorder">
            <summary>Calculates the number of dash characters required for grid border</summary>
            <returns>A string value containing the border characters</returns>
        </member>
        <member name="M:ToyRobotConsole.UserInterface.BuildGrid">
            <summary>Calculates the entire grid world</summary>
            <returns>A string value containing the entire grid</returns>
        </member>
        <member name="M:ToyRobotConsole.UserInterface.PrintGrid">
            <summary>Prints the grid to the console</summary>
        </member>
        <member name="M:ToyRobotConsole.UserInterface.AskUser(System.String)">
            <summary>Asks the user a question and returns their response</summary>
            <param name="question">A string parameter containing the question for the user</param>
            <returns>A string value containing the user's response</returns>
        </member>
        <member name="M:ToyRobotConsole.UserInterface.PrintMessage(System.String)">
            <summary>Prints a message to the console with a consistent format</summary>
            <param name="message">A string parameter containing the message to be printed to console</param>
        </member>
    </members>
</doc>
